openapi: 3.1.0
x-stoplight:
  id: c1yu0u08jvja9
info:
  title: version2
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
paths:
  '/notes/{noteId}':
    parameters:
      - schema:
          type: string
        name: noteId
        in: path
        required: true
    get:
      summary: get note
      tags:
        - notes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
      operationId: get-notes-id
      description: 指定した投稿を取得します。
    delete:
      summary: delete note
      tags: []
      responses: {}
      operationId: delete-notes-id
      description: 指定した投稿を削除します
  '/notes/{noteId}/replies':
    parameters:
      - schema:
          type: string
        name: noteId
        in: path
        required: true
    get:
      summary: get replies
      tags:
        - notes
      responses: {}
      operationId: get-notes-noteId-replies
      parameters:
        - schema:
            type: string
          in: query
          name: sinceId
          description: 指定すると、その投稿を基点としてより新しい投稿を取得します
        - schema:
            type: string
          in: query
          name: untilId
          description: 指定すると、その投稿を基点としてより古い投稿を取得します
        - schema:
            type: number
            minimum: 1
            maximum: 100
          in: query
          name: limit
          description: 取得する件数。デフォルトは10
      description: 指定した投稿への返信を取得します。
    post:
      summary: ''
      operationId: post-notes-noteId-replies
      responses:
        '200':
          description: OK
      description: 指定した投稿に返信します
      requestBody:
        $ref: '#/components/requestBodies/PostNote'
  '/notes/{noteId}/renotes':
    parameters:
      - schema:
          type: string
        name: noteId
        in: path
        required: true
    get:
      summary: get renotes
      tags:
        - notes
      responses: {}
      operationId: get-notes-noteId-renotes
      description: 指定した投稿のRenote一覧を取得します。
      parameters:
        - schema:
            type: number
            minimum: 1
            maximum: 100
          in: query
          name: limit
          description: 取得する件数。デフォルトは10
        - schema:
            type: string
          in: query
          name: sinceId
        - schema:
            type: string
          in: query
          name: "untilId\t"
    post:
      summary: ''
      operationId: post-notes-noteId-renotes
      responses:
        '200':
          description: OK
      requestBody:
        $ref: '#/components/requestBodies/PostNote'
  '/notes/{noteId}/reactions':
    parameters:
      - schema:
          type: string
        name: noteId
        in: path
        required: true
    post:
      summary: add reaction
      tags:
        - notes
      responses: {}
      operationId: post-notes-noteId-reactions
      description: 指定した投稿にリアクションします。
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reaction:
                  type: string
                  description: リアクション
                dislike:
                  type: boolean
                  description: きらい
    delete:
      summary: remove reaction
      tags:
        - notes
      responses: {}
      operationId: delete-notes-noteId-reactions
      description: 指定した投稿へのリアクションを取り消します。
    get:
      summary: ''
      operationId: get-notes-noteId-reactions
      responses:
        '200':
          description: OK
      description: 指定した投稿のリアクション一覧を取得します。
      parameters:
        - schema:
            type: string
          in: query
          name: type
        - schema:
            type: number
            minimum: 1
            maximum: 100
          in: query
          name: limit
        - schema:
            type: number
          in: query
          name: offset
        - schema:
            type: string
          in: query
          name: sinceId
        - schema:
            type: string
          in: query
          name: untilId
  '/channels/{channelId}':
    parameters:
      - schema:
          type: string
        name: channelId
        in: path
        required: true
    post:
      summary: send message for channel
      tags:
        - channels
      responses: {}
      operationId: post-channel-channelId
      requestBody:
        $ref: '#/components/requestBodies/PostNote'
      description: チャンネルへノートを投稿します
  '/notes/{noteId}/favorite':
    parameters:
      - schema:
          type: string
        name: noteId
        in: path
        required: true
    delete:
      summary: remove favorite
      tags:
        - notes
      responses: {}
      operationId: delete-notes-noteId-favorite
      description: 指定した投稿のお気に入りを解除します。
    post:
      summary: make favorite
      tags:
        - notes
      responses: {}
      operationId: post-notes-noteId-favorite
      description: 指定した投稿をお気に入りに登録します。
components:
  schemas:
    User:
      title: User
      type: object
      description: ''
      examples:
        - id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        dateOfBirth:
          type: string
          format: date
          example: '1997-10-31'
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
        createDate:
          type: string
          format: date
          description: The date that the user was created.
      required:
        - id
        - firstName
        - lastName
        - email
        - emailVerified
    Note:
      title: Note
      x-stoplight:
        id: 5pb42iqlwc2ck
      type: object
      properties:
        id:
          type: string
          description: ノートのId
        createdAt:
          type: string
          description: ノートの作成日時
        text:
          type:
            - string
            - 'null'
          description: ノートの内容
        cw:
          type:
            - string
            - 'null'
          description: ノートに対する注意
        user:
          $ref: '#/components/schemas/NoteUser'
        userId:
          type: string
          description: ノート作者のId
        reply:
          $ref: '#/components/schemas/Note'
        replyId:
          type: string
        renote:
          $ref: '#/components/schemas/Note'
        renoteId:
          type: string
        files:
          type: array
          items:
            $ref: '#/components/schemas/DriveFile'
        fileIds:
          type: array
          items:
            type: string
        visibility:
          type: string
        myReaction:
          type: string
        reactions:
          type: array
          items:
            type: object
            properties:
              string:
                type: number
        poll:
          type: string
        emojis:
          type: string
      x-internal: false
    NoteUser:
      title: NoteUser
      x-stoplight:
        id: nannh5c1apotg
      type: object
      properties:
        id:
          type: string
        host:
          type:
            - string
            - 'null'
        name:
          type: string
        onlineStatus:
          type: string
        avatarUrl:
          type: string
        avatarBlurhash:
          type: string
        emojis:
          type: string
        instance:
          $ref: '#/components/schemas/LiteInstance'
    LiteInstance:
      title: LiteInstance
      x-stoplight:
        id: 938vhemi8kqeu
      type: object
      properties:
        host:
          type: string
        name:
          type: string
        softwareName:
          type: string
        softwareversion:
          type: string
        iconUrl:
          type: string
        faviconUrl:
          type: string
        themeColor:
          type: string
    DriveFile:
      title: DriveFile
      x-stoplight:
        id: urs7nk38s41f8
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
        isSensitive:
          type: string
        name:
          type: string
        thumbnailUrl:
          type: string
        url:
          type: string
        type:
          type: string
        size:
          type: string
        md5:
          type: string
        blurhash:
          type: string
        properties:
          type: string
    CreatePoll:
      title: CreatePoll
      x-stoplight:
        id: 9a8v52stm5uo7
      type: object
      properties:
        choices:
          type: array
          description: アンケートの選択肢
          items:
            type: string
        multiple:
          type:
            - boolean
            - 'null'
          description: 複数回答を許可するか否か
        expiresAt:
          type:
            - 'null'
            - number
          description: いつ終わるか
        expiredAfter:
          type:
            - 'null'
            - number
          description: 何秒後に終わるか
    Geo:
      title: Geo
      x-stoplight:
        id: kv3l46wfk9rfh
      type: object
      properties:
        coordinates:
          type: array
          items:
            type:
              - string
              - 'null'
        altitude:
          type: number
        accuracy:
          type: number
        altitudeAccuracy:
          type: number
        heading:
          type: number
        speed:
          type: number
  requestBodies:
    PostNote:
      content:
        application/json:
          schema:
            type: object
            properties:
              visibility:
                type: array
                description: 投稿の公開範囲
                items:
                  type: string
              visibleUserIds:
                type: array
                description: (投稿の公開範囲が specified の場合)投稿を閲覧できるユーザー
                items:
                  type: string
              text:
                type: string
                description: 投稿内容
              cw:
                type: string
                description: コンテンツの警告。このパラメータを指定すると設定したテキストで投稿のコンテンツを隠す事が出来ます。
              viaMobile:
                type: boolean
                description: モバイルデバイスからの投稿か否か。
              localOnly:
                type: boolean
                description: ローカルへの投稿か否か。
              extractMentions:
                type: boolean
                description: 本文からメンションを展開しないか否か。
              extractHashtags:
                type: boolean
                description: |
                  本文からハッシュタグを展開しないか否か。
              extractEmojis:
                type: boolean
              geo:
                $ref: '#/components/schemas/Geo'
              fileIds:
                type: array
                description: |
                  添付するファイル
                items:
                  type: string
              poll:
                $ref: '#/components/schemas/CreatePoll'
